} else {
return(NULL)  # 如果没有值则返回NULL
}
}))
return(df)
} else {
showNotification("No values field found in the data", type = "error")
return(NULL)
}
}
# 在加载数据后更新年份选择器
observeEvent(input$load, {
data <- get_kpi_data(input$period)
if (!is.null(data) && nrow(data) > 0) { # 检查数据框是否不为空
output$kpiTable <- renderTable({
data
})
} else {
showNotification("Data loading failed or no data available", type = "error")
}
})
}
# 运行应用
shinyApp(ui = ui, server = server)
library(shiny)
library(httr)
library(jsonlite)
# 定义 UI
ui <- fluidPage(
titlePanel("Kolada KPI 数据分析"),
sidebarLayout(
sidebarPanel(
selectInput("year", "选择年份:", choices = c(2021, 2022, 2020)), # 年份选择器
actionButton("load", "加载数据") # 加载数据的按钮
),
mainPanel(
tableOutput("kpiTable") # 数据表输出
)
)
)
# 定义 Server
server <- function(input, output, session) {
# 获取数据函数
get_kpi_data <- function(year) {
url <- paste0("https://api.kolada.se/v2/data/kpi/N00945/year/", year)
response <- GET(url)
# 检查 API 请求状态
if (http_status(response)$category != "Success") {
showNotification("API 请求失败", type = "error")
return(NULL)
}
# 从 JSON 解析数据
data <- fromJSON(content(response, as = "text"), flatten = TRUE)
# 打印数据结构用于调试
print("数据结构:")
print(str(data))
# 检查数据结构
if (!is.null(data$values) && length(data$values) > 0) {
# 将数据转换为数据框
df <- do.call(rbind, lapply(data$values, function(x) {
if (!is.null(x$values) && length(x$values) > 0) {
return(data.frame(
municipality = x$municipality,
value = x$values[[1]]$value, # 提取第一个值的 value
period = x$period
))
} else {
return(NULL)  # 如果没有值则返回 NULL
}
}))
return(df)
} else {
showNotification("没有找到值字段", type = "error")
return(NULL)
}
}
# 在加载数据后更新表格
observeEvent(input$load, {
data <- get_kpi_data(input$year)
if (!is.null(data)) {
output$kpiTable <- renderTable({
data
})
} else {
showNotification("数据加载失败或没有可用数据", type = "error")
}
})
}
# 运行应用
shinyApp(ui = ui, server = server)
# 运行应用
shinyApp(ui = ui, server = server)
library(shiny)
library(httr)
library(jsonlite)
# 定义 UI
ui <- fluidPage(
titlePanel("Kolada KPI 数据分析"),
sidebarLayout(
sidebarPanel(
selectInput("year", "选择年份:", choices = c(2021, 2022, 2020)), # 年份选择器
actionButton("load", "加载数据") # 加载数据的按钮
),
mainPanel(
tableOutput("kpiTable") # 数据表输出
)
)
)
# 定义 Server
server <- function(input, output, session) {
# 获取数据函数
get_kpi_data <- function(year) {
url <- paste0("https://api.kolada.se/v2/data/kpi/N00945/year/", year)
response <- GET(url)
# 检查 API 请求状态
if (http_status(response)$category != "Success") {
showNotification("API 请求失败", type = "error")
return(NULL)
}
# 从 JSON 解析数据
data <- fromJSON(content(response, as = "text"), flatten = TRUE)
# 打印数据结构用于调试
cat("数据结构:\n")
print(str(data))  # 输出数据结构以查看
# 检查 data 是否为空
if (is.null(data) || length(data) == 0) {
showNotification("获取的数据为空", type = "error")
return(NULL)
}
# 检查 values 字段
if ("values" %in% names(data) && length(data$values) > 0) {
# 将数据转换为数据框
df <- do.call(rbind, lapply(data$values, function(x) {
# 检查 x 的结构，确保它是一个列表
if (!is.list(x)) {
cat("x 不是一个列表，当前值为:\n")
print(x)  # 打印 x 的当前值
return(NULL)  # 如果不是列表，则返回 NULL
}
# 检查 x$values 的结构
if ("values" %in% names(x) && length(x$values) > 0) {
# 提取每个 municipality 的 value 信息
return(data.frame(
municipality = x$municipality,
value = x$values[[1]]$value, # 提取第一个值的 value
period = x$period
))
} else {
cat("x$values 不存在或为空，当前值为:\n")
print(x)  # 打印 x 的当前值
return(NULL)  # 如果没有值则返回 NULL
}
}))
return(df)
} else {
showNotification("没有找到值字段", type = "error")
return(NULL)
}
}
# 在加载数据后更新表格
observeEvent(input$load, {
data <- get_kpi_data(input$year)
if (!is.null(data)) {
output$kpiTable <- renderTable({
data
})
} else {
showNotification("数据加载失败或没有可用数据", type = "error")
}
})
}
# 运行应用
shinyApp(ui = ui, server = server)
library(shiny)
library(httr)
library(jsonlite)
# 定义 UI
ui <- fluidPage(
titlePanel("Kolada KPI 数据分析"),
sidebarLayout(
sidebarPanel(
selectInput("year", "选择年份:", choices = c(2021, 2022, 2020)), # 年份选择器
actionButton("load", "加载数据") # 加载数据的按钮
),
mainPanel(
tableOutput("kpiTable") # 数据表输出
)
)
)
# 定义 Server
server <- function(input, output, session) {
# 获取数据函数
get_kpi_data <- function(year) {
url <- paste0("https://api.kolada.se/v2/data/kpi/N00945/year/", year)
response <- GET(url)
# 检查 API 请求状态
if (http_status(response)$category != "Success") {
showNotification("API 请求失败", type = "error")
return(NULL)
}
# 从 JSON 解析数据
data <- fromJSON(content(response, as = "text"), flatten = TRUE)
# 打印数据结构用于调试
cat("数据结构:\n")
print(str(data))  # 输出数据结构以查看
# 检查 data 是否为空
if (is.null(data) || length(data) == 0) {
showNotification("获取的数据为空", type = "error")
return(NULL)
}
# 检查 values 字段
if ("values" %in% names(data) && length(data$values) > 0) {
# 将数据转换为数据框
df <- do.call(rbind, lapply(data$values, function(x) {
# 检查 x 的结构，确保它是一个列表
if (!is.list(x)) {
cat("x 不是一个列表，当前值为:\n")
print(x)  # 打印 x 的当前值
return(NULL)  # 如果不是列表，则返回 NULL
}
# 检查 x$values 的结构
if ("values" %in% names(x) && length(x$values) > 0) {
# 提取每个 municipality 的 value 信息
return(data.frame(
municipality = x$municipality,
value = x$values[[1]]$value, # 提取第一个值的 value
period = x$period
))
} else {
cat("x$values 不存在或为空，当前值为:\n")
print(x)  # 打印 x 的当前值
return(NULL)  # 如果没有值则返回 NULL
}
}))
return(df)
} else {
showNotification("没有找到值字段", type = "error")
return(NULL)
}
}
# 在加载数据后更新表格
observeEvent(input$load, {
data <- get_kpi_data(input$year)
if (!is.null(data)) {
output$kpiTable <- renderTable({
data
})
} else {
showNotification("数据加载失败或没有可用数据", type = "error")
}
})
}
# 运行应用
shinyApp(ui = ui, server = server)
library(shiny)
library(httr)
library(jsonlite)
# 定义 UI
ui <- fluidPage(
titlePanel("Kolada KPI 数据分析"),
sidebarLayout(
sidebarPanel(
selectInput("year", "选择年份:", choices = c(2021, 2022, 2020)), # 年份选择器
actionButton("load", "加载数据") # 加载数据的按钮
),
mainPanel(
tableOutput("kpiTable") # 数据表输出
)
)
)
# 定义 Server
server <- function(input, output, session) {
# 获取数据函数
get_kpi_data <- function(year) {
url <- paste0("https://api.kolada.se/v2/data/kpi/N00945/year/", year)
response <- GET(url)
# 检查 API 请求状态
if (http_status(response)$category != "Success") {
showNotification("API 请求失败", type = "error")
return(NULL)
}
# 从 JSON 解析数据
data <- fromJSON(content(response, as = "text"), flatten = TRUE)
# 打印数据结构用于调试
cat("数据结构:\n")
print(str(data))  # 输出数据结构以查看
# 检查 data 是否为空
if (is.null(data) || length(data) == 0) {
showNotification("获取的数据为空", type = "error")
return(NULL)
}
# 检查 values 字段
if ("values" %in% names(data) && length(data$values) > 0) {
# 将数据转换为数据框
df <- do.call(rbind, lapply(data$values, function(x) {
# 检查 x 的结构，确保它是一个列表
if (!is.list(x)) {
cat("x 不是一个列表，当前值为:\n")
print(x)  # 打印 x 的当前值
return(NULL)  # 如果不是列表，则返回 NULL
}
# 检查 x$values 的结构
if ("values" %in% names(x) && length(x$values) > 0) {
# 提取每个 municipality 的 value 信息
return(data.frame(
municipality = x$municipality,
value = x$values[[1]]$value, # 提取第一个值的 value
period = x$period
))
} else {
cat("x$values 不存在或为空，当前值为:\n")
print(x)  # 打印 x 的当前值
return(NULL)  # 如果没有值则返回 NULL
}
}))
return(df)
} else {
showNotification("没有找到值字段", type = "error")
return(NULL)
}
}
# 在加载数据后更新表格
observeEvent(input$load, {
data <- get_kpi_data(input$year)
if (!is.null(data)) {
output$kpiTable <- renderTable({
data
})
} else {
showNotification("数据加载失败或没有可用数据", type = "error")
}
})
}
# 运行应用
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Kolada KPI 数据分析"),
sidebarLayout(
sidebarPanel(
selectInput("year", "选择年份:", choices = c(2021, 2022, 2020)), # 年份选择器
actionButton("load", "加载数据") # 加载数据的按钮
),
mainPanel(
tableOutput("kpiTable") # 数据表输出
)
)
)
# 定义 Server
server <- function(input, output, session) {
# 获取数据函数
get_kpi_data <- function(year) {
url <- paste0("https://api.kolada.se/v2/data/kpi/N00945/year/", year)
response <- GET(url)
# 打印响应状态码
cat("HTTP 状态码:", http_status(response)$message, "\n")
# 检查 API 请求状态
if (http_status(response)$category != "Success") {
showNotification("API 请求失败", type = "error")
return(NULL)
}
# 从 JSON 解析数据
data <- fromJSON(content(response, as = "text"), flatten = TRUE)
# 打印完整数据返回内容用于调试
cat("API 返回的完整数据:\n")
print(data)  # 打印 API 返回的完整内容以查看结构
# 检查 data 是否为空
if (is.null(data) || length(data) == 0) {
showNotification("获取的数据为空", type = "error")
return(NULL)
}
# 检查 values 字段
if ("values" %in% names(data) && length(data$values) > 0) {
# 将数据转换为数据框
df <- do.call(rbind, lapply(data$values, function(x) {
# 检查 x 的结构，确保它是一个列表
if (!is.list(x)) {
cat("x 不是一个列表，当前值为:\n")
print(x)  # 打印 x 的当前值
return(NULL)  # 如果不是列表，则返回 NULL
}
# 检查 x$values 的结构
if ("values" %in% names(x) && length(x$values) > 0) {
# 提取每个 municipality 的 value 信息
return(data.frame(
municipality = x$municipality,
value = x$values[[1]]$value, # 提取第一个值的 value
period = x$period
))
} else {
cat("x$values 不存在或为空，当前值为:\n")
print(x)  # 打印 x 的当前值
return(NULL)  # 如果没有值则返回 NULL
}
}))
return(df)
} else {
showNotification("没有找到值字段", type = "error")
return(NULL)
}
}
# 在加载数据后更新表格
observeEvent(input$load, {
data <- get_kpi_data(input$year)
if (!is.null(data)) {
output$kpiTable <- renderTable({
data
})
} else {
showNotification("数据加载失败或没有可用数据", type = "error")
}
})
}
# 运行应用
shinyApp(ui = ui, server = server)
usethis::use github action check standard()
usethis::use_github_action_check_standard()
install.packages("usethis")
install.packages("usethis")
setwd("C:/Users/Yunta/Documents/lab5/lab5")
library(usethis)
# 创建 GitHub Action 来检查包的标准
use_github_action(check_standard = TRUE)
# 加载 usethis 包
library(usethis)
# 加载 usethis 包
library(usethis)
# 创建 GitHub Action 来检查包的标准
use_github_action(check_standard = TRUE)
use_github_action_check()
use_github_action("check-standard")
#' @title Get Kolada Data
#' @description Obtain the data for a specific year.
#' @param year The year for which to fetch data.
#' @return A list containing the data for the specified year.
#' @name get_kolada_data
#' @import httr
#' @import jsonlite
#' @export
library(httr)
library(jsonlite)
get_kolada_data <- function(year) {
if (year < 1900 || year > 2100) {
stop("Failed to fetch data. Invalid year: ", year)
}
url <- paste0("https://api.kolada.se/v2/data/kpi/N00945/year/", year)
print(paste("Fetching data from URL:", url))
response <- GET(url)
if (status_code(response) == 200) {
data <- content(response, as = "text", encoding = "UTF-8")
json_data <- fromJSON(data)
return(json_data)
} else {
stop("Failed to fetch data. Status code: ", status_code(response))
}
}
install.packages("devtools")
# 加载 devtools 包
library(devtools)
# 更新文档
document()  # 这将生成 NAMESPACE 文件和 Rd 文档
# 创建 vignette
build_vignettes()  # 这将生成 vignette 的 HTML 文件
install.packages("devtools")
# 更新文档
document()  # 这将生成 NAMESPACE 文件和 Rd 文档
# 创建 vignette
build_vignettes()  # 这将生成 vignette 的 HTML 文件
getwd()
setwd("D:/1-lab5/lab5")
# 创建 vignette
build_vignettes()  # 这将生成 vignette 的 HTML 文件
#' @title Get Kolada Data
#' @description Obtain the data for a specific year.
#' @param year The year for which to fetch data.
#' @return A list containing the data for the specified year.
#' @name get_kolada_data
#' @import httr
#' @import jsonlite
#' @export
library(httr)
library(jsonlite)
get_kolada_data <- function(year) {
if (year < 1900 || year > 2100) {
stop("Failed to fetch data. Invalid year: ", year)
}
url <- paste0("https://api.kolada.se/v2/data/kpi/N00945/year/", year)
print(paste("Fetching data from URL:", url))
response <- GET(url)
if (status_code(response) == 200) {
data <- content(response, as = "text", encoding = "UTF-8")
json_data <- fromJSON(data)
return(json_data)
} else {
stop("Failed to fetch data. Status code: ", status_code(response))
}
}
get_api("https://api.kolada.se/v2/data/kpi/N00945/year/", year)
get_api <-
function(search, api_key) {
url <- paste0("https://www.kolada.se/om-oss/api/", search, "&appid=", api_key)
response <- GET(url)
if (response$status_code == 200) {
content <- content(response, "parsed")
return(content)
} else {
stop("Failed to fetch data. Status code: ", response$status_code)
}
}
get_api("https://api.kolada.se/v2/data/kpi/N00945/year/", year)
url <- paste0("https://api.kolada.se/v2/data/kpi/N00945/year/", year)
# 创建 vignette
build_vignettes()  # 这将生成 vignette 的 HTML 文件
